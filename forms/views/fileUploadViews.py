from django.views import View
from django.views.decorators.csrf import requires_csrf_token
from django.contrib.auth.mixins import LoginRequiredMixin
from django.contrib.auth import get_user_model
User = get_user_model()
from accounts.models import UserProfile

from django.shortcuts import get_object_or_404, render, redirect
from django.http import HttpResponse, HttpResponseRedirect
from django.urls import reverse, reverse_lazy

from django.contrib import messages

from datetime import datetime, date
from django.utils import timezone
import re
from email_validator import validate_email, EmailNotValidError
from pathlib import Path
import csv

from forms.forms import ResponseForm, QuestionForm, FormsForm, FormQuestionForm, QuestionSelector, RespondentForm
from forms.models import Respondent, Form, FormQuestion, Question, Option, Response, Answer, FormLogic, FormLogicRule

now = timezone.now()

class FormTemplate(LoginRequiredMixin, View):
    def get(self, request, pk):
        form = Form.objects.filter(id=pk).first()
        response = HttpResponse(
            content_type="text/csv",
            headers={"Content-Disposition": f'attachment; filename="form_template_{form.id}_{form}.csv"'},
        )
        form_structure = FormQuestion.objects.filter(form=form.id).order_by('index')
        form_questions = [fq.question for fq in form_structure]

        respondent_fields = [field.name for field in Respondent._meta.get_fields()]
        respondent_fields.remove('response')
        respondent_fields.remove('id')
        respondent_fields.remove('created_at')
        respondent_fields.remove('updated_at')
        respondent_fields.remove('created_by')
        question_fields = [q.question_text for q in form_questions]

        fields = respondent_fields + ['response_date'] + question_fields
        writer = csv.writer(response)
        writer.writerow(fields)

        return response

    def post(self, request, pk):
        override = False
        form = Form.objects.filter(id=pk).first()
        formQuestions = FormQuestion.objects.filter(form=form).order_by('index')
        if not formQuestions:
            messages.add_message(request, messages.INFO, 'This form has no questions. Double check that it was constructed properly.')
            return
        try:
            if request.POST['template'] == '':
                messages.add_message(request, messages.INFO, 'Please select a file to upload!.')
                return HttpResponseRedirect(reverse("forms:view-form-detail", kwargs={'pk': form.id}))
        except:
            pass
        file = request.FILES['template']
        testFileType = str(file)
        fileExtension = Path(testFileType).suffix
        if fileExtension != '.csv':
            messages.add_message(request, messages.INFO, 'Uploaded file must be a .csv file.')
            return HttpResponseRedirect(reverse("forms:view-form-detail", kwargs={'pk': form.id}))
        decoded_file = file.read().decode('utf-8').splitlines()
        reader = csv.DictReader(decoded_file)
        for i, row in enumerate(reader):
            try:
                id_no = row['id_no']
            except:
                messages.add_message(request, messages.INFO, 'The uploaded file has missing columns. Please make sure to use the template generated by clicking the "Create Tempalte" button below.')
                return HttpResponseRedirect(reverse("forms:view-form-detail", kwargs={'pk': form.id}))

            checkRespondent = Respondent.objects.filter(id_no = row['id_no']).first()
            if not checkRespondent:
                checkRespondent = Respondent(id_no=row['id_no'])
                override = True
            respondent = checkRespondent

            if override:
                try:
                    fname = row['fname']
                    lname = row['lname']
                    dob = row['dob']
                    sex = row['sex']
                    ward = row['ward']
                    village = row['village']
                    district = row['district']
                    citizenship = row['citizenship']
                except:
                    messages.add_message(request, messages.INFO, 'The uploaded file has missing columns. Please make sure to use the template generated by clicking the "Create Tempalte" button below.')
                    return HttpResponseRedirect(reverse("forms:view-form-detail", kwargs={'pk': form.id}))

                maleResponses = ['m', 'male', 'man', 'boy']
                femaleResponses = ['f', 'female', 'woman', 'girl']
                nbResponses = ['nb', 'non-binary', 'nonbinary', ]
                sex =  row['sex'].replace(' ', '').lower()
                if sex in maleResponses:
                    sex = 'M'
                elif sex in femaleResponses:
                    sex = 'F'
                elif sex in nbResponses:
                    sex = 'NB'
                else:
                    messages.add_message(request, messages.INFO, f'Respondent sex at row {i+1} contained a value we could not read. Please enter "male/female/non-binary" or "M/F/NB".')
                    continue

                dob = date.today()
                rawDOB = row['dob'].strip().replace('“', '').replace('”', '').replace('"', '')
                try:
                    dob = datetime.strptime(rawDOB, '%m/%d/%Y').date()
                except ValueError:
                    messages.add_message(request, messages.INFO, f'Row {i+1} contains an invalid date value (expected MM/DD/YY) at column Date of Birth. This response will not be recorded until the error is fixed.')
                    continue
                if dob > datetime.today().date():
                    messages.add_message(request, messages.INFO, f'Row {i+1} contains an impossible date of birth. Please verify this record.')
                    continue

                email = row['email'].strip()
                if row['email'] != '':
                    try:
                        emailInfo = validate_email(row['email'], check_deliverability=False)
                        email = emailInfo.normalized

                    except EmailNotValidError as e:
                        email = ''
                        messages.add_message(request, messages.INFO, f'Respondent email at row {i+1} contained an invalid email address. Value was not recorded.')
                else:
                    email = None
                    
                phone = row['contact_no'].strip()
                if row['contact_no'] != '':
                    checkNum = re.search(r'^[\+]?[(]?[0-9]{3}[)]?[-\s\.]?[0-9]{3}[-\s\.]?[0-9]{4,6}$', row['contact_no'])
                    if not checkNum:
                        messages.add_message(request, messages.INFO, f'Respondent email at row {i+1} contained an invalid phone number. Value was not recorded.')
                    else:
                        phone = row['contact_no']

                respondent.fname = row['fname']
                respondent.lname = row['lname']
                respondent.dob = dob
                respondent.sex = sex
                respondent.ward = row['ward']
                respondent.village = row['village']
                respondent.district = row['district']
                respondent.citizenship = row['citizenship']
                respondent.email = email
                respondent.contact_no = phone
                respondent.save() 

            responseDate = None
            flag = False
            try:
                raw_date = row['response_date'].strip().replace('“', '').replace('”', '').replace('"', '')
            except:
                messages.add_message(request, messages.INFO, 'Template is missing the "response_date" column. Please make sure you are using a template created using the button below.')
                return HttpResponseRedirect(reverse("forms:view-form-detail", kwargs={'pk': form.id}))
            
            try:
                responseDate = datetime.strptime(raw_date, '%m/%d/%Y')
            except ValueError:
                messages.add_message(request, messages.INFO, f'Row {i+1} contains an invalid date value (expected MM/DD/YY) at column Response Date. This response will default to the current date until the error is fixed.')
                responseDate = datetime.today()

            if responseDate.date() > form.end_date or responseDate.date() < form.start_date:
                messages.add_message(request, messages.INFO, f'Row {i+1} contains a response date that is outside the time period of this form. Please double check this value.')
                flag = True

            checkResponse = Response.objects.filter(form = form.id, respondent = respondent.id).first()
            if checkResponse:
                response = checkResponse
                response.updated_at = now
            else:
                response = Response(respondent=respondent, form=form, created_by=request.user, response_date = responseDate, flag=flag)
            response.save()

            for colNo, fq in enumerate(formQuestions):
                question = fq.question
                answer = None

                #check for an existing answer and fetch it if it exists
                if checkResponse:
                    checkAnswer = Answer.objects.filter(response = response, question = question)
                    if checkAnswer and question.question_type != 'Multiple Selections': 
                        answer = checkAnswer.first()
                    #to avoid confusion, if there are multiple answers just remove them
                    elif checkAnswer and question.question_type == 'Multiple Selections':
                        for a in checkAnswer:
                            a.delete()
                #if not an existing answer or if the response is new, create a new answer object
                    else:
                        answer = Answer(response = response, question = question)
                else:
                    answer = Answer(response = response, question = question)
                try:
                    checkQuestionExists = row[question.question_text]
                except:
                    messages.add_message(request, messages.INFO, f'This template is missing question "{question.question_text}". Please make sure you are using the correct template for this form and that the template is up to date.')
                    continue

                value = row[question.question_text]

                if question.question_type == 'Text' or question.question_type == 'Number':
                    if question.question_type == 'Number':
                        if value == '':
                            value = 0
                            messages.add_message(request, messages.INFO, f'The answer at column {colNo+13} row {i+1} contained an blank entry. This has been recorded as 0. If this was not intentional, please add a valid number.')
                        try:
                            float(value)
                        except (TypeError, ValueError):
                            messages.add_message(request, messages.INFO, f'Answer "{value}" at column {colNo+13} row {i+1} expected a number.')
                            continue
                    answer.open_answer=value
                    answer.save()
                if question.question_type == 'Yes/No':
                    if value == '':
                        continue
                    if value.strip().lower() == 'yes':
                        value = 'Yes'
                    elif value.strip().lower() == 'no':
                        value = 'No'
                    else:
                        messages.add_message(request, messages.INFO, f'Answer "{value}" at column {colNo+13} row {i+1} is not a valid response. This question requires either a "Yes" or a "No"')
                        continue
                    answer.open_answer = value
                    answer.save()

                if question.question_type == 'Single Selection':
                    if value == '':
                        continue
                    notFound = False
                    value = value.strip().lower()
                    try:
                        int(value)
                        checkOption = Option.objects.filter(id = value)
                        if checkOption:
                            answer.option =checkOption
                        else:
                            notFound = True
                    except (TypeError, ValueError):
                        notFound = True
                    if notFound:  
                        checkOption = Option.objects.filter(option_text__iexact=value, question=question).first()
                        if checkOption:
                            answer.option = checkOption
                        else:
                            messages.add_message(request, messages.INFO, f'Answer "{value}" at column {colNo+13} row {i+1} is not a valid response. No response will be recorded. Please double check that this is a valid response for this question.')
                            continue
                    answer.save()

                if question.question_type == 'Multiple Selections':
                    if value == '':
                        continue
                    selectedOptions = value.split(',')
                    for option in selectedOptions:
                        value = option.strip().lower()
                        try:
                            int(value)
                            checkOption = Option.objects.filter(id = value)
                            if checkOption:
                                answer = Answer(response=response, question = question, option = checkOption)
                            else:
                                notFound = True
                        except (TypeError, ValueError):
                            notFound = True
                        if notFound:  
                            checkOption = Option.objects.filter(option_text__iexact=value, question=question).first()
                            if checkOption:
                                answer = Answer(response=response, question = question, option = checkOption)
                            else:
                                messages.add_message(request, messages.INFO, f'Answer "{value}" at column {colNo+13} row {i+1} is not a valid response. No response will be recorded. Please double check that this is a valid response for this question.')
                                continue
                        answer.save()

        return HttpResponseRedirect(reverse("forms:view-form-detail", kwargs={'pk': form.id})) 